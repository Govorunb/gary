# yaml-language-server: $schema=https://json-schema.org/draft-07/schema
title: Gary Config Schema
$id: gary-config
additionalProperties:
  oneOf:
    - {$ref: "#/definitions/preset_base"}
    - {$ref: "#/definitions/preset_inherit"}

definitions:
  preset_base:
    description: Preset
    type: object
    properties:
      api:
        type: object
        properties:
          host: {type: string}
          port: {type: integer, minimum: 1, maximum: 65535}
          reload: {type: boolean}
        additionalProperties: true
      llm:
        type: object
        properties:
          engine: {$ref: "#/definitions/engine"}
          model:
            type: string
            description: |
              For local engines (e.g. llama_cpp), use the local path to the model (e.g. `_models/llama-2-7b.gguf`).
              For guidance_server, this should be the URL of the server.
              Randy ignores this.
            # For remote services like Anthropic, use the name of the model.
          api_key: {type: string}
        if: {not: {properties: {engine: {const: randy}}}}
        then:
          required: [engine, model]
        else:
          required: [engine]
        additionalProperties: false
      engine_params:
        type: object
        description: |
          (Advanced) Parameters to pass to your chosen engine. Refer to the engine's documentation for possible values.
        additionalProperties: true
      gary:
        type: object
        properties:
          logging:
            type: object
            properties:
              log_level_file: {$ref: "#/definitions/log_level"}
              log_level_console: {$ref: "#/definitions/log_level"}
              modules:
                type: object
                description: |
                  Log levels for specific areas. The key is the module name, and the value is the log level.
                  There are some common names that are aliased for convenience, available in the auto-complete suggestions.
                properties:
                  game:
                    $ref: "#/definitions/log_level"
                    description: |
                      Logs things related to processing messages from the game.
                      This is the layer between the websocket connection and the LLM (scheduler).
                  websocket:
                    $ref: "#/definitions/log_level"
                    description: |
                      Everything to do with the websocket connection is logged here.
                      Set the log level to `trace` to see raw incoming/outgoing messages.
                  llm:
                    $ref: "#/definitions/log_level"
                    description: |
                      Log area for the language model.
                      Notable log levels:
                      - Model decisions are logged with `debug`
                      - Context is logged with `info`
                      - Model's speech is logged with `success`, which is one level above `info`
                  scheduler:
                    $ref: "#/definitions/log_level"
                    description: |
                      The scheduler is responsible for queueing actions and periodically poking the model if there's no incoming stimuli.
                      You generally shouldn't need to peek in here, but it may aid in debugging in some edge cases.
                  webui:
                    $ref: "#/definitions/log_level"
                    description: |
                      Everything to do with the web UI.
                propertyNames:
                  pattern: ^\w[\w.]+$
                additionalProperties: {$ref: "#/definitions/log_level"}
          allow_yapping:
            type: boolean
            description: |
              Allow the model to choose to say something instead of performing an action.
              Eats through tokens and very likely to distract the model. Only enable this for "realism".
          existing_connection_policy:
            $ref: "#/definitions/conflict_resolution_policy"
            description: |
              What to do when someone tries to connect to a game that already has an active connection.
          existing_action_policy:
            $ref: "#/definitions/conflict_resolution_policy"
            description: |
              What to do when an action is registered with the same name as an existing action.
          scheduler:
            type: object
            properties:
              idle_timeout_try:
                description: |
                  If the model does not act for this many seconds, ask it to act (it may still decide not to).
                  1s minimum, 0 to disable.
                oneOf:
                  - {type: number, minimum: 1}
                  - {const: 0}
              idle_timeout_force:
                description: |
                  If the model does not act for this many seconds, force it to pick an action to perform.
                  1s minimum, 0 to disable.
                oneOf:
                  - {type: number, minimum: 1}
                  - {const: 0}
              sleep_after_say:
                type: boolean
                description: |
                  Sleep after saying something to simulate waiting for TTS.
                  Duration is based on message length (0.1s per character).
              log_level: {$ref: "#/definitions/log_level"}
        additionalProperties: false
    additionalProperties: false
  preset_inherit:
    description: Inherit from another preset
    type: object
    properties:
      base: {type: string}
      overrides: {$ref: "#/definitions/preset_base"}
    required: [base, overrides]
  engine:
    enum: [
      llama_cpp, transformers,
      randy,
      # openai, anthropic, azure_openai, googleai,
      guidance_server,
    ]
  log_level:
    description: |
      Minimum log level.
      This can be one of the given values, or a non-negative integer (refer to the Loguru documentation at https://loguru.readthedocs.io/en/stable/api/logger.html#levels).
    oneOf:
      - enum: [all, trace, debug, info, success, warning, error, critical, none]
      - {type: integer, minimum: 0}
  conflict_resolution_policy:
    enum: [drop_incoming, drop_existing]
