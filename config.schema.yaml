# yaml-language-server: $schema=https://json-schema.org/draft-07/schema
title: Gary Config Schema
$id: gary-config
additionalProperties:
  oneOf:
    - {$ref: "#/definitions/preset_base"}
    - {$ref: "#/definitions/preset_inherit"}

definitions:
  preset_base:
    description: Preset
    type: object
    properties:
      api:
        type: object
        properties:
          host: {type: string}
          port: {type: integer, minimum: 1, maximum: 65535}
          reload: {type: boolean}
        additionalProperties: true
      llm:
        type: object
        properties:
          engine: {$ref: "#/definitions/engine"}
          model:
            type: string
            description: |
              For local engines (e.g. llama_cpp), use the local path to the model (e.g. `_models/llama-2-7b.gguf`).
              For guidance_server, this should be the URL of the server.
              Randy ignores this.
            # For remote services like Anthropic, use the name of the model.
          api_key: {type: string}
        required: [engine, model]
        additionalProperties: false
      engine_params:
        type: object
        description: |
          Parameters to pass to your chosen engine. Refer to the engine's documentation for possible values.
        additionalProperties: true
      gary:
        type: object
        properties:
          logging:
            type: object
            properties:
              log_level_file: {$ref: "#/definitions/log_level"}
              log_level_console: {$ref: "#/definitions/log_level"}
              log_levels:
                type: object
                additionalProperties: {$ref: "#/definitions/log_level"}
          allow_yapping:
            type: boolean
            description: |
              Allow the model to choose to say something instead of performing an action.
              Eats through tokens and very likely to distract the model. Only enable this for "realism".
          existing_connection_policy:
            $ref: "#/definitions/conflict_resolution_policy"
            description: |
              What to do when someone tries to connect to a game that already has an active connection.
          existing_action_policy:
            $ref: "#/definitions/conflict_resolution_policy"
            description: |
              What to do when an action is registered with the same name as an existing action.
          scheduler:
            type: object
            properties:
              idle_timeout_try:
                description: |
                  If the model does not act for this many seconds, ask it to act (it may still decide not to).
                  1s minimum, 0 to disable.
                oneOf:
                  - {type: number, minimum: 1}
                  - {const: 0}
              idle_timeout_force:
                description: |
                  If the model does not act for this many seconds, force it to pick an action to perform.
                  1s minimum, 0 to disable.
                oneOf:
                  - {type: number, minimum: 1}
                  - {const: 0}
              sleep_after_say:
                type: boolean
                description: |
                  Sleep after saying something to simulate waiting for TTS.
                  Duration is based on message length.
              log_level: {$ref: "#/definitions/log_level"}
        additionalProperties: false
    additionalProperties: false
  preset_inherit:
    description: Inherit from another preset
    type: object
    properties:
      base: {type: string}
      overrides: {$ref: "#/definitions/preset_base"}
    required: [base, overrides]
  engine:
    enum: [
      llama_cpp, transformers,
      randy,
      # openai, anthropic, azure_openai, googleai,
      guidance_server,
    ]
  log_level:
    description: Minimum log level. This can be one of the given values, or a non-negative integer (refer to the [Loguru](https://loguru.readthedocs.io/en/stable/api/logger.html#levels) documentation).
    oneOf:
      - enum: [all, trace, debug, info, success, warn, warning, error, critical, fatal, none]
      - type: integer
        minimum: 0
  conflict_resolution_policy:
    enum: [drop_incoming, drop_existing]
